#!/usr/bin/env bash

#
#  ██                    ██              ██  ██
#  ░░                    ░██             ░██ ░██
#   ██ ███████   ██████ ██████  ██████   ░██ ░██
#  ░██░░██░░░██ ██░░░░ ░░░██░  ░░░░░░██  ░██ ░██
#  ░██ ░██  ░██░░█████   ░██    ███████  ░██ ░██
#  ░██ ░██  ░██ ░░░░░██  ░██   ██░░░░██  ░██ ░██
#  ░██ ███  ░██ ██████   ░░██ ░░████████ ███ ███
#  ░░ ░░░   ░░ ░░░░░░     ░░   ░░░░░░░░ ░░░ ░░░
#

# Exit on error, undefined variable, or error in any part of a pipe sequence
set -Eeuo pipefail

# Set up colors
_colors_bold=$(tput bold)
_colors_red=$(tput setaf 1)
_colors_green=$(tput setaf 2)
_colors_cyan=$(tput setaf 6)
_colors_reset=$(tput sgr0)

_script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
_dotfiles_dir="${_script_dir%/*}"

echo ""
echo -e "The dotfiles folder is set as ${_colors_bold}${_colors_cyan}${_dotfiles_dir}${_colors_reset}. Is this correct?"

read -r -p  "(press enter to confirm or type in a new path)  " confirm

if [ -n "$confirm" ]; then
    if [[ ! -d "$confirm" ]]; then
        echo -e "${_colors_red}Could not find ${_colors_bold}${confirm}${_colors_reset}, please re-run the script.${_colors_reset}"
        exit 1
    fi

    _dotfiles_dir="$confirm"
fi

echo ""
echo -e "${_colors_green}Setting up dotfiles in ${_colors_bold}${_dotfiles_dir}${_colors_reset}..."
echo ""

_files_to_symlink=(
.config/amfora
.config/bat
.config/gh
.config/htop
.config/youtube-dl
.gnupg/gpg.conf
.gnupg/gpg-agent.conf
.curlrc
.gitconfig
.gvimrc
.hushlogin
.npmrc
.nuxtrc
.vim
.vimrc
.zshrc
)

mkdir -p "$HOME/.config"
mkdir -p "$HOME/.gnupg"

for f in "${_files_to_symlink[@]}"; do
    echo "${_colors_cyan}${_dotfiles_dir}/${f}${_colors_reset} ${_colors_bold}→${_colors_reset} ${_colors_cyan}$HOME/${f}${_colors_reset}"

    if [[ -L "$HOME/$f" ]]; then
        echo "$HOME/$f is already symlinked, skipping..."
    elif [[ ! -e "${_dotfiles_dir}/$f" ]]; then
        echo "Could not find ${_dotfiles_dir}/$f, skipping..."
    else
        if [[ -e "$HOME/$f" || -L "$HOME/$f" ]]; then
            timestamp=$(date +%Y%m%d_%H%M%S)
            echo "$HOME/$f already exists, backing it up to $HOME/$f.bak_$timestamp"
            mv "$HOME/$f" "$HOME/$f.bak_$timestamp"
        fi
        ln -nfsv "${_dotfiles_dir}/$f" "$HOME/$f"
    fi
done

echo ""
echo "${_colors_green}Dotfiles symlinked.${_colors_reset}"
echo ""

if [[ $_dotfiles_dir != "$HOME/dotfiles" ]]; then
    echo "${_colors_red}HEY YOU GOTTA DO THIS TO NOT BREAK STUFF!${_colors_reset}"
    echo ""
    echo "Automatically updating ${_colors_cyan}.zshrc${_colors_reset} to point to the correct folder..."
    sed -i.bak "s|export DOTFILES_PATH=\"\$HOME/dotfiles\"|export DOTFILES_PATH=\"$_dotfiles_dir\"|g" "$HOME/.zshrc"
    echo "Done. Backup of .zshrc has been saved as .zshrc.bak in case you need it."
    echo ""
fi

# Adjust permissions for the original files within the .dotfiles directory
find $_dotfiles_dir -type d -exec chmod 755 {} \;  # Set directory permissions
find $_dotfiles_dir -type f -exec chmod 644 {} \;  # Set file permissions

