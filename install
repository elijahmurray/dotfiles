#!/usr/bin/env bash

#
#  ██                    ██              ██  ██
#  ░░                    ░██             ░██ ░██
#   ██ ███████   ██████ ██████  ██████   ░██ ░██
#  ░██░░██░░░██ ██░░░░ ░░░██░  ░░░░░░██  ░██ ░██
#  ░██ ░██  ░██░░█████   ░██    ███████  ░██ ░██
#  ░██ ░██  ░██ ░░░░░██  ░██   ██░░░░██  ░██ ░██
#  ░██ ███  ░██ ██████   ░░██ ░░████████ ███ ███
#  ░░ ░░░   ░░ ░░░░░░     ░░   ░░░░░░░░ ░░░ ░░░
#

# Exit on error, undefined variable, or error in any part of a pipe sequence
set -Eeuo pipefail

# Set up colors
_colors_bold=$(tput bold)
_colors_red=$(tput setaf 1)
_colors_green=$(tput setaf 2)
_colors_cyan=$(tput setaf 6)
_colors_reset=$(tput sgr0)

_script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
_dotfiles_dir="$_script_dir"


echo ""
echo -e "The dotfiles folder is set as ${_colors_bold}${_colors_cyan}${_dotfiles_dir}${_colors_reset}. Is this correct?"

read -r -p  "(press enter to confirm or type in a new path)  " confirm

if [ -n "$confirm" ]; then
    if [[ ! -d "$confirm" ]]; then
        echo -e "${_colors_red}Could not find ${_colors_bold}${confirm}${_colors_reset}, please re-run the script.${_colors_reset}"
        exit 1
    fi
    _dotfiles_dir="$confirm"
fi

echo ""
echo -e "${_colors_green}Setting up dotfiles in ${_colors_bold}${_dotfiles_dir}${_colors_reset}..."
echo ""

_files_to_symlink=(
.macos
.oh-my-zsh/custom/themes/*    # Assuming your custom themes are here.
.oh-my-zsh/custom/plugins/*   # Assuming your custom plugins are here.
.profile
.rspec
.tmux.conf
.vim
.vimrc
.zshrc
install
)

# Ensure base directories exist
mkdir -p "$HOME/.config"
mkdir -p "$HOME/.gnupg"

for f in "${_files_to_symlink[@]}"; do
    src="${_dotfiles_dir}/$f"
    dest="$HOME/$f"
    echo "Processing ${_colors_cyan}$f${_colors_reset}..."

    if [[ -L "$dest" ]]; then
        echo "$dest is already symlinked, skipping..."
        continue
    fi

    if [[ ! -e "$src" ]]; then
        echo "Could not find $src, skipping..."
        continue
    fi

    if [[ -e "$dest" ]]; then
        timestamp=$(date +%Y%m%d_%H%M%S)
        echo "$dest already exists, backing it up to $dest.bak_$timestamp"
        mv "$dest" "$dest.bak_$timestamp"
    fi

    echo "Creating symlink: ${_colors_cyan}${src}${_colors_reset} ${_colors_bold}→${_colors_reset} ${_colors_cyan}${dest}${_colors_reset}"
    ln -sfv "$src" "$dest"
done

echo "${_colors_green}Dotfiles symlinked.${_colors_reset}"

# Set up vim-plug for Vim
echo -e "${_colors_green}Setting up vim-plug and Vim plugins...${_colors_reset}"

# Check if vim-plug is already installed
if [[ ! -e "$HOME/.vim/autoload/plug.vim" ]]; then
    echo -e "${_colors_cyan}Downloading vim-plug...${_colors_reset}"
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
else
    echo -e "${_colors_cyan}vim-plug already installed, skipping download.${_colors_reset}"
fi

# Install Vim plugins using vim-plug
echo -e "${_colors_cyan}Installing Vim plugins...${_colors_reset}"
vim +PlugInstall +qall

echo -e "${_colors_green}Vim setup complete.${_colors_reset}"

# Check if Oh My Zsh is already installed
if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    echo "Installing Oh My Zsh..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
else
    echo "Oh My Zsh is already installed. Skipping installation."
fi


# Update .zshrc if needed
if [[ $_dotfiles_dir != "$HOME/dotfiles" ]]; then
    echo "Automatically updating ${_colors_cyan}.zshrc${_colors_reset} to point to the correct folder..."
    sed -i.bak "s|export DOTFILES_PATH=\"\$HOME/dotfiles\"|export DOTFILES_PATH=\"$_dotfiles_dir\"|g" "$HOME/.zshrc"
    echo "Done. Backup of .zshrc has been saved as .zshrc.bak in case you need it."
fi

